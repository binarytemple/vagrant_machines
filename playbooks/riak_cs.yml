---
- hosts: all
  vars_files:
   - ./riak_cs/vars.yml
  vars:
    enable_anon_user_create: True
- include: riak_cs/redhat.yml
  when: ansible_lsb.major_release == "6" and ansible_os_family == "RedHat"
- include: riak_cs/debian.yml
  when: ansible_os_family == "Debian"
  tasks:
   # We need to add the permissive configuration files
  - action: template src=../../remote/riak_cs_files/etc/riak/app.config.j2 dest=/etc/riak/app.config mode=0644
    register: config_change
    when: install_riak is defined

  - action: template src=../../remote/riak_cs_files/etc/riak/vm.args.j2 dest=/etc/riak/vm.args mode=0644
    register: config_change
    when: install_riak is defined

  - action: template src=../../remote/riak_cs_files/etc/riak-cs/app.config.j2 dest=/etc/riak-cs/app.config mode=0644
    register: config_change
    when: install_riak_cs is defined

  - action: template src=../../remote/riak_cs_files/etc/riak-cs/vm.args.j2 dest=/etc/riak-cs/vm.args mode=0644
    register: config_change
    when: install_riak_cs is defined

  - action: template src=../../remote/riak_cs_files/etc/stanchion/app.config.j2 dest=/etc/stanchion/app.config mode=0644
    register: config_change
    when: install_stanchion is defined

  - action: template src=../../remote/riak_cs_files/etc/stanchion/vm.args.j2 dest=/etc/stanchion/vm.args mode=0644
    register: config_change
    when: install_stanchion is defined

  - name: start riak service
    action: service name=riak state=restarted
    when: config_change|changed

  - action: shell /usr/sbin/riak ping
    register: riak_result
    until: riak_result.stdout.find("pong") != -1
    retries: 5
    delay: 10

  - name: start riak-cs service
    action: service name=riak-cs state=restarted
    when: config_change|changed

  - action: shell /usr/sbin/riak-cs ping
    register: riak_cs_result
    until: riak_cs_result.stdout.find("pong") != -1
    retries: 5
    delay: 10

  - name: start stanchion service
    action: service name=stanchion state=restarted
    when: config_change|changed

  - action: shell /usr/sbin/stanchion ping
    register: stanchion_result
    until:  stanchion_result.stdout.find("pong") != -1
    retries: 5
    delay: 10

#  Create the s3 admin user if the s3creds.txt file doesn't exist.

  - name: Check if s3creds.txt file exists
    stat: path="{{ansible_env['HOME']}}.s3cfg"
    register: check_s3creds_path

  - name: create the admin user (can repeat multiple times)
    action: uri 
        url=http://localhost:8080/riak-cs/user 
        method=POST 
        body='{"email":"admin27@admin.com","name":"admin27"}'
        HEADER_Content-Type=application/json
        status_code=201,409
        return_content=yes
    when: not check_s3creds_path.stat.exists  
    register: create_admin_result

  - name: echo the create_admin_result 
    action: debug msg=key_id {{ create_admin_result.json.key_id }}, id {{ create_admin_result.json.id }}, key_secret {{ create_admin_result.json.key_secret }}
    when: create_admin_result.has_key('json')

  - action: template src=../remote/riak_cs_files/homedir/s3cfg.j2 dest=/home/vagrant/.s3cfg mode=0644
    when: create_admin_result.has_key('json')